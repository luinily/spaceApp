//
//  ApodViewControllerTests.swift
//  spaceApp
//
//  Created by Coldefy Yoann on 2016/07/17.
//  Copyright (c) 2016年 YoannColdefy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import spaceApp
import XCTest

class ApodViewControllerTests: XCTestCase {
	// MARK: Subject under test
	var target: ApodViewController!
	var window: UIWindow!
}

// MARK: Test lifecycle
extension ApodViewControllerTests {
	override func setUp() {
		super.setUp()
		window = UIWindow()
		setupApodViewController()
	}
	
	override func tearDown() {
		window = nil
		super.tearDown()
	}
}

// MARK: Test setup
extension ApodViewControllerTests {
	func setupApodViewController() {
		let bundle = Bundle.main
		let storyboard = UIStoryboard(name: "Main", bundle: bundle)
		target = storyboard.instantiateViewController(withIdentifier: "ApodViewController") as! ApodViewController
	}
	
	func loadView() {
		window.addSubview(target.view)
		RunLoop.current.run(until: Date())
	}
	
	func prepareViewModel() -> ApodViewModel {
		let title = "Title"
		let picture = UIImage(imageLiteralResourceName: "UnitTestImage")
		let date = "2016年07月19日"
		let explanation = "explanation"
		let copyright = "copyright"
		return ApodViewModel(title: title, picture: picture, date: date, explanation: explanation, copyright: copyright)
	}
}

// MARK: Test doubles
extension ApodViewControllerTests {
	class MockApodViewControllerOutput: ApodViewControllerOutput {
		var fetchTodayApodCalled = false
		func fetchTodayApod(request: TodayApodRequest) {
			fetchTodayApodCalled = true
		}
	}
}

// MARK: Tests
extension ApodViewControllerTests {
	func test_viewDidLoad_fetchTodaysApodIsCalled() {
		// Arrange
		let outputSpy = MockApodViewControllerOutput()
		target.output = outputSpy
		
		// Act
		loadView()
		
		// Assert
		XCTAssertTrue(outputSpy.fetchTodayApodCalled)
	}
	
	func test_displayApod_TitleIsDisplayed() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertEqual(target.titleLabel.text, viewModel.title)
	}
	
	func test_displayApod_ExplanationIsDisplayed() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertEqual(target.explanationTextView.text, viewModel.explanation)
	}
	
	func test_displayApod_ScrollViewHasSubview() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertFalse(target.imageScrollView.subviews.isEmpty)
	}
	
	func test_displayApod_ScrollViewSubviewsDoNotAddup() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertEqual(target.imageScrollView.subviews.count, 3)
		//the scroll views contains 2 views for the sliders and our view making it 3
	}
	
	func test_displayApod_ScrollViewContentsSizeSetToImageSize() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertEqual(target.imageScrollView.contentSize, viewModel.picture?.size)
	}
	
	func test_displayApod_SetsImageViewFrame() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		let frame = CGRect(x: 0, y: 0, width: viewModel.picture!.size.width, height: viewModel.picture!.size.height)
		
		// Act
		target.displayApod(viewModel: viewModel)
		let imageView = target.getImageViewFromScrollView()
		
		// Assert
		XCTAssertEqual(imageView?.frame, frame)
		
	}
	
}

