//
//  ApodViewControllerTests.swift
//  spaceApp
//
//  Created by Coldefy Yoann on 2016/07/17.
//  Copyright (c) 2016年 YoannColdefy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import spaceApp
import XCTest

class ApodViewControllerTests: XCTestCase {
	// MARK: Subject under test
	var target: ApodViewController!
	var window: UIWindow!
	var outputSpy: MockApodViewControllerOutput!
}

// MARK: Test lifecycle
extension ApodViewControllerTests {
	override func setUp() {
		super.setUp()
		window = UIWindow()
		setupApodViewController()
		outputSpy = MockApodViewControllerOutput()
		target.output = outputSpy
	}
	
	override func tearDown() {
		window = nil
		super.tearDown()
	}
}

// MARK: Test setup
extension ApodViewControllerTests {
	func setupApodViewController() {
		let bundle = Bundle.main
		let storyboard = UIStoryboard(name: "Main", bundle: bundle)
		if let viewController = storyboard.instantiateViewController(withIdentifier: "ApodViewController") as? ApodViewController {
			target = viewController
		}
	}
	
	func loadView() {
		window.addSubview(target.view)
		RunLoop.current.run(until: Date())
	}
	
	func prepareViewModel() -> ApodViewModel {
		let title = "Title"
		let picture = UIImage(imageLiteralResourceName: "UnitTestImage")
		let date = "2016年07月19日"
		let explanation = "explanation"
		let copyright = "copyright"
		return ApodViewModel(title: title, picture: picture, date: date, explanation: explanation, copyright: copyright)
	}
}

// MARK: Test doubles
extension ApodViewControllerTests {
	class MockApodViewControllerOutput: ApodViewControllerOutput {
		var fetchTodayApodCalled = false
		var fetchRandomApodCalled = false
		
		func fetchTodayApod(request: TodayApodRequest) {
			fetchTodayApodCalled = true
		}
		
		func fetchRandomApod(request: RandomApodRequest) {
			fetchRandomApodCalled = true
		}
	}
}

// MARK: Tests
extension ApodViewControllerTests {
	func test_viewDidLoad_fetchTodaysApodIsCalled() {
		// Arrange
		
		// Act
		loadView()
		
		// Assert
		XCTAssertTrue(outputSpy.fetchTodayApodCalled)
	}
	
	func test_viewDidLoad_ViewControllerIsScrollViewDelegate() {
		// Arrange
		
		// Act
		loadView()
		
		// Assert
		guard let delegate = target.imageScrollView.delegate else {
			XCTAssert(false)
			return
		}
		
		XCTAssertTrue(delegate === target)
	}
	
	func test_viewDidLoad_RefreshControlIsCreated() {
		// Arrange
		
		// Act
		loadView()
		
		// Assert
		XCTAssertNotNil(target.refreshControl)
	}
	
	func test_viewDidLoad_RefreshIsSetToRefreshScrollView() {
		// Arrange
		
		// Act
		loadView()
		
		// Assert
		XCTAssertTrue(target.refreshScrollView.refreshControl === target.refreshControl)
	}
	
	func test_viewDidLoad_RefreshControlHasATarget() {
		// Arrange
		
		// Act
		loadView()
		
		// Assert
		XCTAssertEqual(target.refreshControl.allTargets().count, 1)
	}

	func test_displayApod_TitleIsDisplayed() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertEqual(target.titleLabel.text, viewModel.title)
	}
	
	func test_displayApod_ExplanationIsDisplayed() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertEqual(target.explanationTextView.text, viewModel.explanation)
	}
	
	func test_displayApod_ScrollViewHasSubview() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertFalse(target.imageScrollView.subviews.isEmpty)
	}
	
	func test_displayApod_ScrollViewSubviewsDoNotAddup() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertEqual(target.imageScrollView.subviews.count, 3)
		//the scroll views contains 2 views for the sliders and our view making it 3
	}
	
	func test_displayApod_ScrollViewContentsSizeSetToImageSize() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		let width = viewModel.picture!.size.width * target.imageScrollView.zoomScale
		let height = viewModel.picture!.size.height * target.imageScrollView.zoomScale
		XCTAssertEqual(target.imageScrollView.contentSize.height, height)
		XCTAssertEqual(target.imageScrollView.contentSize.width, width)
	}
	
	func test_displayApod_SetsImageViewFrame() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		
		// Act
		target.displayApod(viewModel: viewModel)
		let imageView = target.getImageViewFromScrollView()
		
		// Assert
		let width = viewModel.picture!.size.width * target.imageScrollView.zoomScale
		let height = viewModel.picture!.size.height * target.imageScrollView.zoomScale

		XCTAssertEqualWithAccuracy((imageView?.frame.width)!, width, accuracy: 0.0001)
		XCTAssertEqualWithAccuracy((imageView?.frame.height)!, height, accuracy: 0.0001)
	}
	
	func test_displayApod_SetsScrollViewMinimumZoomScale() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		let scale = calculateMinimumZoomScale(imageScrollView: target.imageScrollView, picture: viewModel.picture!)
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertEqual(target.imageScrollView.minimumZoomScale, scale)
	}
	
	private func calculateMinimumZoomScale(imageScrollView: UIScrollView, picture: UIImage) -> CGFloat {
		let minWidthScale = imageScrollView.frame.width / picture.size.width
		let minHeightScale = imageScrollView.frame.height / picture.size.height
		
		return min(minWidthScale, minHeightScale)
	}
	
	func test_displayApod_SetsScrollViewScaleToMinimumZoomScale() {
		// Arrange
		loadView()
		let viewModel = prepareViewModel()
		
		// Act
		target.displayApod(viewModel: viewModel)
		
		// Assert
		XCTAssertEqual(target.imageScrollView.zoomScale, target.imageScrollView.minimumZoomScale)
	}
	
	func test_onRefreshPull_CallsOutput_fetchRandomApod() {
		// Arrange
		loadView()
		
		// Act
		target.onRefreshPull()
		
		// Assert
		XCTAssertTrue(outputSpy.fetchRandomApodCalled)
	}
	
	
}
